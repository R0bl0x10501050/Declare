{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Declare Declare is a Roblox library for creating Instances. It follows the format of Roact (React for Roblox) but includes a new Template feature and is intended for all instances, not just UI.","title":"Home"},{"location":"#declare","text":"Declare is a Roblox library for creating Instances. It follows the format of Roact (React for Roblox) but includes a new Template feature and is intended for all instances, not just UI.","title":"Declare"},{"location":"quickstart/","text":"First, let's initialize the module. local Declare = require ( game . ServerStorage . MainModule ) local Insert = Declare . Insert local Template = Declare . Template Next, let's define a new Button template. local Button = Template \"TextButton\" { Name = \"Button\" , Text = \"Click Me\" , Size = UDim2 . new ( 0.8 , 0 , 0 , 100 ), [ \"Event:MouseButton1Click\" ] = function () print ( \"Clicked a button!\" ) end , } For properties, we use the name, but for events, we will use the Event:<NAME> format. Now, let's make a Declare Tree. local tree = Insert \"ScreenGui\" { Children = { Insert \"Frame\" { Size = UDim2 . new ( 0 , 1000 , 0 , 750 ), Children = { Button { BackgroundColor3 = Color3 . fromRGB ( math.random ( 0 , 255 ), math.random ( 0 , 255 ), math.random ( 0 , 255 )), Position = UDim2 . new ( 0 , 0 , 0.1 , 0 ) }, Button { BackgroundColor3 = Color3 . fromRGB ( math.random ( 0 , 255 ), math.random ( 0 , 255 ), math.random ( 0 , 255 )), Position = UDim2 . new ( 0 , 0 , 0.4 , 0 ) }, Button { BackgroundColor3 = Color3 . fromRGB ( math.random ( 0 , 255 ), math.random ( 0 , 255 ), math.random ( 0 , 255 )), Position = UDim2 . new ( 0 , 0 , 0.7 , 0 ) } } } } } This will create a ScreenGui>Frame>3 Buttons . Finally, we will mount the GUI on the first player in the game. wait ( 5 ) Declare . Mount ( tree , game . Players : GetPlayers ()[ 1 ]. PlayerGui ) Great! We've made out first Declare program. Move on to the API Reference to learn more.","title":"Quickstart"},{"location":"reference/","text":"API Reference Declare.Insert Params ClassName: string Properties/Events: table<any> Returns Instance<any> Example local Declare = require ( path . to . Declare ) local Insert = Declare . Insert -- Remember: NO parenthesis syntax! local element = Insert \"Part\" { Name = \"Light\" , Color = Color3 . new ( 1 , 1 , 1 ), [ \"Event:Touched\" ] = function () print ( \"Touched the light!\" ) end , Children = { Insert \"PointLight\" {} } } Declare.Template Params ClassName string Properties/Events: table<any> Returns function Example local Declare = require ( path . to . Declare ) local Template = Declare . Template -- Remember: NO parenthesis syntax! local Brick = Template \"Part\" { Name = \"Brick\" , Material = Enum . Material . Brick , } local CoolBrick = Brick { Color = Color3 . fromRGB ( 255 , 0 , 0 ) } Declare.Mount Params Element: Instance<any> Parent: Instance<any> Returns nil Example -- Remember: NO parenthesis syntax! local Brick = Insert \"Part\" { Name = \"Brick\" , Material = Enum . Material . Brick , } Declare . Mount ( Brick , workspace )","title":"API Reference"},{"location":"reference/#api-reference","text":"","title":"API Reference"},{"location":"reference/#declareinsert","text":"","title":"Declare.Insert"},{"location":"reference/#params","text":"ClassName: string Properties/Events: table<any>","title":"Params"},{"location":"reference/#returns","text":"Instance<any>","title":"Returns"},{"location":"reference/#example","text":"local Declare = require ( path . to . Declare ) local Insert = Declare . Insert -- Remember: NO parenthesis syntax! local element = Insert \"Part\" { Name = \"Light\" , Color = Color3 . new ( 1 , 1 , 1 ), [ \"Event:Touched\" ] = function () print ( \"Touched the light!\" ) end , Children = { Insert \"PointLight\" {} } }","title":"Example"},{"location":"reference/#declaretemplate","text":"","title":"Declare.Template"},{"location":"reference/#params_1","text":"ClassName string Properties/Events: table<any>","title":"Params"},{"location":"reference/#returns_1","text":"function","title":"Returns"},{"location":"reference/#example_1","text":"local Declare = require ( path . to . Declare ) local Template = Declare . Template -- Remember: NO parenthesis syntax! local Brick = Template \"Part\" { Name = \"Brick\" , Material = Enum . Material . Brick , } local CoolBrick = Brick { Color = Color3 . fromRGB ( 255 , 0 , 0 ) }","title":"Example"},{"location":"reference/#declaremount","text":"","title":"Declare.Mount"},{"location":"reference/#params_2","text":"Element: Instance<any> Parent: Instance<any>","title":"Params"},{"location":"reference/#returns_2","text":"nil","title":"Returns"},{"location":"reference/#example_2","text":"-- Remember: NO parenthesis syntax! local Brick = Insert \"Part\" { Name = \"Brick\" , Material = Enum . Material . Brick , } Declare . Mount ( Brick , workspace )","title":"Example"}]}